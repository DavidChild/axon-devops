---
- name: muta multi nodes chain
  hosts: muta-dev
  user: muta
  vars:
    devops_path: "/home/muta/muta-devops"
    muta_path: "{{ devops_path }}/muta"
    configs_path: "{{ devops_path }}/configs"
    data_dir: "{{ devops_path }}/chain-data"
    muta_version: eb73210
    muta_repo: https://github.com/KaoImin/muta.git
    chain_node_num: 4
    bootstraps_num: "{{ chain_node_num }}"
    force_recreate: false
  vars_files:
    - chain_meta.json
  tasks:
    - name: install necessary packages
      block:
        - name: install docker, git and pip
          apt:
            name:
              - docker.io
              - git
              - python-pip
              - python-apt
            update_cache: yes
        - name: install docker-compose
          get_url:
            url: https://github.com/docker/compose/releases/download/1.25.0/docker-compose-Linux-x86_64
            dest: /usr/local/bin/docker-compose
            mode: 0755
        - pip:
            name:
              - docker
      become: yes
      when: ansible_facts['distribution'] == "Ubuntu"
    - debug:
        msg: Please install docker, git, and docker-compose yourself.
      when: ansible_facts['distribution'] != "Ubuntu"
    - name: ensure dirs created
      file: path="{{ item }}" state=directory
      with_items:
        - "{{ devops_path }}"
        - "{{ muta_path }}"
        - "{{ configs_path }}"
        - "{{ data_dir }}"
        - "{{ devops_path }}/es-data"
        - "{{ devops_path }}/kibana-data"
        - "{{ devops_path }}/fluent-bit-data"
    - name: copy scripts
      synchronize:
        src: "scripts/"
        dest: "{{ devops_path}}/scripts/"
        rsync_opts:
          - "--exclude=node_modules/"
    - name: Start service docker, if not started
      service:
        name: docker
        state: started
      become: yes
    - name: "ensure muta repo exists, and version is '{{ muta_version }}'"
      git:
        repo: "{{ muta_repo }}"
        dest: "{{ muta_path }}"
        version: "{{ muta_version }}"
    - name: ensure 'nervos/muta:dev' docker image exists
      docker_image:
        name: nervos/muta
        tag: dev
        source: pull
    - name: build muta binary
      command: "docker run -it --rm --name build-muta-{{ muta_version }} -v {{ muta_path }}:/code -v {{ muta_path }}/target/cargo_cache:/usr/local/cargo/registry nervos/muta:dev bash -c 'cd /code && cargo build --release && cp target/release/muta-chain target/release/muta-chain-{{ muta_version }}'"
      args:
        chdir: "{{ muta_path }}"
        creates: "target/release/muta-chain-{{ muta_version }}"

    - copy:
        src: get_chain_name.py
        dest: "{{ data_dir }}/get_chain_name.py"
        mode: u=rwx
    - command:
        cmd: ./get_chain_name.py -c {{ muta_version }} -n {{ chain_node_num }} {{ force_recreate and '-f' or '' }}
        chdir: "{{ data_dir }}"
      register: chain_name
    - set_fact: chain_dir="{{ data_dir }}/{{ chain_name.stdout }}"
    - debug: var=chain_dir
    - file: path="{{ chain_dir }}{{ item }}" state=directory
      with_items:
        - /
        - /data
        - /logs
        - /configs
    - template:
        src: templates/docker-compose.yaml.j2
        dest: "{{ chain_dir }}/docker-compose.yaml"
    - template:
        src: templates/config.toml.j2
        dest: "{{ chain_dir }}/configs/{{ item.index }}.toml"
      loop: "{{ keypairs[:chain_node_num] | list }}"
    - name: check if current exists
      stat:
        path: "{{ data_dir }}/current"
      register: current_result
    - debug: var=current_result
    - name: teardown running chain
      docker_compose:
        project_src: "{{ data_dir }}/current"
        state: absent
      when: current_result['stat']['exists']
    - name: create 'current' link to latest chain_dir
      file:
        src: "{{ chain_dir }}"
        dest: "{{ data_dir }}/current"
        state: link
    - name: ensure chain is up
      docker_compose:
        project_src: "{{ data_dir }}/current"
    - name: start elasticsearch, kibana and fluent-bit
      block:
        - copy:
            src: "{{ item }}"
            dest: "{{ configs_path }}/{{ item }}"
          with_items:
            - elasticsearch.yml
            - kibana.yml
            - fluent-bit-muta-parser.conf
            - fluent-bit-muta-docker.conf
        - name: start elasticsearch
          docker_container:
            name: elasticsearch
            image: docker.elastic.co/elasticsearch/elasticsearch:7.4.2
            network_mode: host
            volumes:
              - "{{ configs_path }}/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml"
              - "{{ devops_path }}/es-data:/usr/share/elasticsearch/data"
            env:
              discovery.type: single-node
        - name: start kibana
          docker_container:
            name: kibana
            image: docker.elastic.co/kibana/kibana:7.4.2
            network_mode: host
            volumes:
              - "{{ configs_path }}/kibana.yml:/usr/share/kibana/config/kibana.yml"
              - "{{ devops_path }}/kibana-data:/usr/share/kibana/data"
        - name: start fluent-bit
          docker_container:
            name: fluent-bit
            image: fluent/fluent-bit:1.3
            network_mode: host
            volumes:
              - "{{ devops_path }}:/data"
            command: /fluent-bit/bin/fluent-bit -c /data/configs/fluent-bit-muta-docker.conf -R /data/configs/fluent-bit-muta-parser.conf


